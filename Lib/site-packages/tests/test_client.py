<<<<<<< HEAD
import os
import unittest

from mock import call, MagicMock, patch

from yarg import get, HTTPError


class GoodResponse(object):
    status_code = 200
    package = os.path.join(os.path.dirname(__file__),
                           'package.json')
    content = open(package).read()


class BadResponse(object):
    status_code = 300
    reason = "Mocked"


class TestClient(unittest.TestCase):

    @patch('requests.get', return_value=BadResponse)
    def test_get(self, get_mock):
        # Python 2.6....
        try:
            get("test")
        except HTTPError as e:
            self.assertEqual(300, e.status_code)
            self.assertEqual(e.status_code, e.errno)
            self.assertEqual(e.reason, e.message)

    @patch('requests.get', return_value=GoodResponse)
    def test_end_slash(self, get_mock):
        get("test", pypi_server="https://mock.test.mock/test")
        self.assertEqual(call('https://mock.test.mock/test/test/json'),
                         get_mock.call_args)
=======
import unittest

from imagekitio.client import ImageKit
from tests.helpers import ClientTestCase

imagekit_obj = ImageKit(
    private_key="private_fake:",
    public_key="public_fake123:",
    url_endpoint="fake.com",
)


class TestPHashDistance(unittest.TestCase):
    def test_phash_distance(self):
        """Tests if phash_distance working properly"""
        a, b = ("33699c96619cc69e", "968e978414fe04ea")
        c, d = ("33699c96619cc69e", "33699c96619cc69e")
        e, f = ("a4a65595ac94518b", "7838873e791f8400")

        self.assertEqual(imagekit_obj.phash_distance(a, b), 30)
        self.assertEqual(imagekit_obj.phash_distance(c, d), 0)
        self.assertEqual(imagekit_obj.phash_distance(e, f), 37)
        self.assertRaises(TypeError, imagekit_obj.phash_distance, "", "dkf90")
        self.assertRaises(TypeError, imagekit_obj.phash_distance, 1234, 111)


class TestClientAndImageKitObjInit(ClientTestCase):
    """
    Tests client and Imagekit classes object initialization
    """

    def test_all_variable_is_being_set_to_obj(self) -> None:
        """
        Tests if variables are properly being set when creating
        an object from ImageKit class
        """
        self.assertIsNotNone(self.client.ik_request)
        self.assertIsNotNone(self.client.url_obj)
        self.assertIsNotNone(self.client.file)


class TestGetAuthenticationParameters(ClientTestCase):
    def test_get_authentication_parameters_without_token(self) -> None:
        result = self.client.get_authentication_parameters("", expire=444)
        self.assertIsNotNone(result)

    def test_get_authentication_param_with_token(self) -> None:
        result = self.client.get_authentication_parameters(
            "dc45da6e3286066265a09e", expire=4555
        )
        self.assertIsNotNone(result)
>>>>>>> 81396d173fbc83a724cab1e1868c7a58497b0e17
